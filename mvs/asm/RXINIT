RXINIT  TITLE 'INITIALIZE  AND CHECK THE BREXX/370 ENVIRONMENT'
* ---------------------------------------------------------------------
*   INITIALIZE  AND CHECK THE BREXX/370 ENVIRONMENT
*   AUTHOR     : MIKE GROSSMANN (MIG)
*   CREATED    : 22.02.2019  MIG
*   C PROLOGUE : JUERGEN WINKELMANN, ETH ZUERICH.
* ---------------------------------------------------------------------
         PRINT   GEN
* =====================================================================
* RXINIT
*
*     MAIN ENTRY POINT USED BY BREXX/370
*
*     INPUT:
*              R1    PARAMS
*
*     OUTPUT:
*              R15   RETURN CODE
*
*     REGISTER USAGE:
*              R5    USERAREA
*              R12   BASE REGISTER
*
* =====================================================================
RXINIT   MRXSTART A2PLIST=YES  START OF PROGRAM
*
         USING PARAMS,RB
         L     R5,WORKPTR      GET PTR TO MEMORY FOR USER AREA
         USING USER,R5
         DROP  RB
*
         CALL  PREPARE         PREPARE USERAREA
*
         CALL  CHKISPF         CHECK ISPF ENVIRONMENT
         CALL  CHKTSO          CHECK TSO  ENVIRONMENT
         CALL  CHKEXEC         CHECK EXEC ENVIRONMENT
         CALL  CHKALLOC        CHECK NEEDED ALLOCATIONS
* ---------------------------------------------------------------------
* HANDLE THE MISSING ALLOCATIONS
* ---------------------------------------------------------------------
         USING USER,R5
*
         IF (TM,FLAGS2,FL2TSOFG,O) ONLY FOR TSOFG
           IF (TM,FLAGS1,FL1IN,NO)
             CALL ALLOCATE,(=CL8'STDIN'),MF=(E,USRCALL)
           ENDIF

           IF (TM,FLAGS1,FL1OUT,NO)
             CALL ALLOCATE,(=CL8'STDOUT'),MF=(E,USRCALL)
           ENDIF

           IF (TM,FLAGS1,FL1ERR,NO)
             CALL ALLOCATE,(=CL8'STDERR'),MF=(E,USRCALL)
           ENDIF
         ENDIF
*
         MRXEXIT
         LTORG
*
         EJECT
* =====================================================================
* PREPARE
*
*     PERFORM ALL NECESSARY PREPARATIONS
*
*     INPUT:
*     INPUT:   R5    UNINITIALIZED USERAREA
*
*     OUTPUT:
*
*     REGISTER USAGE:
*              R5    USER AREA
*              R12   BASE REGISTER
*              R13   SAVE AREA
*
* =====================================================================
         USING USER,R5
PREPARE  CSECT ,
*
* ---------------------------------------------------------------------
* ENTRY CODING - PART 1 - SAVE CALLER'S REGISTERS
* ---------------------------------------------------------------------
         SAVE  (14,12),,PREPARE  SAVE CALLER'S REGISTERS
         BALR  R12,R0          ESTABLISH ADDRESSABILITY
         USING *,R12           SET BASE REGISTER
* ---------------------------------------------------------------------
* ENTRY CODING - PART 2 - PREPARE USER AREA
* ---------------------------------------------------------------------
         LA    14,USER
         LA    15,USRLEN
         L     1,=AL1(X'00',0,0,0)
         MVCL  14,0
         MVC   USREYE,=CL4'USER' ADD EYE CATCHER
*
* ---------------------------------------------------------------------
* ENTRY CODING - PART 3 - CAHINING SAVE AREAS
* ---------------------------------------------------------------------
         LA    R11,USRSA       GET SAVE AREA POINTER
         ST    R13,4(R11)      STORE BACKWARD POINTER
         ST    R11,8(R13)      STORE FORWARD POINTER
*
         LR    R13,R11         GET SAVE AREA ADDRESS ..
* ---------------------------------------------------------------------
* FETCH NECESSARY POINTERS
* ---------------------------------------------------------------------
         LA    R2,0            POINT TO THE CURRENT PSA
         USING PSA,R2          ENSURE ADDRESSABILITY
*
         L     R3,FLCCVT       POINT TO THE CVT
         ST    R3,USRPCVT      STORE ADDRESS IN USER AREA
*
         DROP  R2              PSA NOT NEEDED ANYMORE
* ---------------------------------------------------------------------
* EXIT CODING
* ---------------------------------------------------------------------
         L     R13,4(,R13)     PICK UP CALLER'S SAVE AREA
         L     R14,12(,R13)    GET RETURN ADDRESS
         RETURN (0,12)
* ---
         LTORG
*
         EJECT
* =====================================================================
* CHKISPF
*
*     PERFORM ISPF ENVIRONMENT CHECK
*
*     INPUT:
*              R5    USERAREA
*
*     OUTPUT:
*
*     REGISTER USAGE:
*              R5    USERREA
*              R12   BASE REGISTER
*
* =====================================================================
         USING USER,R5
CHKISPF  CSECT ,
*
* --- ENTRY CODING
         SAVE  (14,12),,CHKISPF  SAVE CALLER'S REGISTERS
         BALR  R12,R0          ESTABLISH ADDRESSABILITY
         USING *,R12           SET BASE REGISTER
*
         LA    R11,USRSA       GET SAVE AREA POINTER
         ST    R13,4(R11)      STORE BACKWARD POINTER
         ST    R11,8(R13)      STORE FORWARD POINTER
*
         LR    R13,R11         GET SAVE AREA ADDRESS ..
* ---
         LA    R4,0            RETURN CODE / MODULE FOUND
* ---------------------------------------------------------------------
* SEE IF THE PROGRAM IS LOCATED IN JOBLIB/STEPLIB OR IN THE LINKLIST.
* ---------------------------------------------------------------------
         MVC   USRBLDLN,ISPTPNAM MOVE IN PROGRAM NAME FOR BLDL
         MVC   USRBLDLF,=H'1'  SET # ENTRIES TO SEARCH
         MVC   USRBLDLL,=H'50' SET P-LIST LENGTH
         BLDL  0,USRBLDL       ATTEMPT TO LOCATE THE PROGRAM
         IF (LTR,R15,R15,NZ)
* ---------------------------------------------------------------------
* IF NOT INVOKE IEAVVMSR TO SEARCH LPA. THIS ROUTINE DESTROYS
* R3, R6, R8, R9, AND RETURNS TO EITHER R14+0 OR R14+4.
* ---------------------------------------------------------------------
           LM  R0,R1,ISPTPNAM  R0-R1 HAVE PROGRAM NAME
           L   R3,USRPCVT      R3 @ CVT
           L   R15,CVTLPDSR-CVT(R0,R3) R15 @ IEAVVMSR EPA
           BALR R14,R15        SEARCH LPA FOR PROGRAM
           B   *+4             FOUND
           LA  R4,4            NOT FOUND
         ENDIF
         IF (LTR,R4,R4,Z)
* ---------------------------------------------------------------------
* THE PROGRAM WAS FOUND.
* ---------------------------------------------------------------------
           LOAD  EP=ISPQRY       LOAD ENTRY POINT OF ISPQRY
           LR    R15,R0          MOVE EP TO R15
           CALL  (15)            CALL ISPQRY
           IF (LTR,R15,R15,Z)    IF RC = 15 ISPF ENVIRONMENT IS PRESENT
             OI  FLAGS2,FL2ISPF
           ENDIF
         ENDIF
* --- EXIT CODING
         L     R13,4(,R13)     PICK UP CALLER'S SAVE AREA
         L     R14,12(,R13)    GET RETURN ADDRESS
         RETURN (0,12)
* ---
         LTORG
ISPTPNAM DC    CL8'ISPQRY'
         EJECT
* =====================================================================
* CHKTSO
*      PERFORM TSO ENVIRONMENT CHECK
*
*      INPUT:  R5  - USERAREA
*
*      OUTPUT:
*
*      REGISTER USAGE:
*              R5    USERREA
*              R12   BASE REGISTER
*
* =====================================================================
         USING USER,R5
CHKTSO   CSECT ,
*
* --- ENTRY CODING
         SAVE  (14,12),,CHKTSO SAVE CALLER'S REGISTERS
         BALR  R12,R0          ESTABLISH ADDRESSABILITY
         USING *,R12           SET BASE REGISTER
*
         LA    R11,USRSA       GET SAVE AREA POINTER
         ST    R13,4(R11)      STORE BACKWARD POINTER
         ST    R11,8(R13)      STORE FORWARD POINTER
*
         LR    R13,R11         GET SAVE AREA ADDRESS ..
* ---
* ---------------------------------------------------------------------
* USING THE EXTRACT MACRO TO GET CONTROL BLOCKS FROM TCB
* ---------------------------------------------------------------------
         EXTRACT EXTADDR,FIELDS=(TIOT,TSO,PSB),MF=(E,USREXTR)
         LM    R1,R3,EXTADDR     R1   R2  R3
         ST    R1,USRPTIOT     SAVE POINTER TO TIOT     3X INIT
* --- TEST FOR FOREGROUND TSO
         IF (TM,0(R2),X'80',O) TEST HIGH-ORDER BIT
           OI  FLAGS2,FL2TSOFG   MARK FOREGROUND TSO AS FOUND
         ENDIF
* --- TEST FOR BACKGROUND
         IF (LTR,R3,R3,NZ)     TEST IF ADDRESS OF PSCB IS PRESENT
           OI  FLAGS2,FL2TSOBG   MARK BACKGROUND TSO AS FOUND
         ENDIF
* --- EXIT CODING
         L     R13,4(,R13)     PICK UP CALLER'S SAVE AREA
         L     R14,12(,R13)    GET RETURN ADDRESS
         RETURN (0,12)
* ---
         LTORG
*
         EJECT
* =====================================================================
* CHKEXEC
*
*     PERFORM EXEC ENVIRONMENT CHECK
*
*     INPUT:
*              R5    USERAREA
*
*     OUTPUT:
*
*     REGISTER USAGE:
*              R5    USERREA
*              R12   BASE REGISTER
*
* =====================================================================
         USING USER,R5
CHKEXEC  CSECT ,
*
* --- ENTRY CODING
         SAVE  (14,12),,CHKEXEC  SAVE CALLER'S REGISTERS
         BALR  R12,R0          ESTABLISH ADDRESSABILITY
         USING *,R12           SET BASE REGISTER
*
         LA    R11,USRSA       GET SAVE AREA POINTER
         ST    R13,4(R11)      STORE BACKWARD POINTER
         ST    R11,8(R13)      STORE FORWARD POINTER
*
         LR    R13,R11         GET SAVE AREA ADDRESS ..
* ---
         IF (TM,FLAGS2,FL2TSOFG,O),OR,                                 *
               (TM,FLAGS2,FL2TSOBG,O)
*
           LA  R6,0            POINT TO THE CURRENT PSA
           USING PSA,R6        ENSURE ADDRESSAIBLITY
*
           L   R1,PSAAOLD      POINT TO THE CURRENT ASCB
           L   R2,ASCBASXB-ASCB(,R1) AND THEN TO THE ASXB
           L   R1,ASXBLWA-ASXB(,R2)  AND THEN TO THE LWA
           L   R2,LWAPECT-LWA(,R1) POINT TO THE CURRENT ECT
           L   R1,ECTIOWA-ECT(,R2)   AND THEN TO THE IOSRL
           L   R2,IOSTELM-IOSRL(,R1) AND THEN TO THE IOSTELM
           LA  R1,INSCODE-INSTACK(,R2) FINALLY TO THE STACK OPTIONS

           IF (TM,0(R1),INSEXEC,O) TEST STACK OPTIONS
             OI  FLAGS2,FL2EXEC      MARKS AS EXEC
           ENDIF
*
           DROP  R6            PSA NOT NEEDED ANYMORE
         ENDIF
* --- EXIT CODING
         L     R13,4(,R13)     PICK UP CALLER'S SAVE AREA
         L     R14,12(,R13)    GET RETURN ADDRESS
         RETURN (0,12)
* ---
         LTORG
*
         EJECT
* =====================================================================
* CHKALLOC
*
*     PERFORM ALLOCATION CHECK
*
*     INPUT:
*              R5    USERAREA
*
*     OUTPUT:
*
*     REGISTER USAGE:
*              R5    USERREA
*              R12   BASE REGISTER
*
* =====================================================================
         USING USER,R5
CHKALLOC CSECT ,
*
* --- ENTRY CODING
         SAVE  (14,12),,CHKALLOC SAVE CALLER'S REGISTERS
         BALR  R12,R0          ESTABLISH ADDRESSABILITY
         USING *,R12           SET BASE REGISTER
*
         LA    R11,USRSA       GET SAVE AREA POINTER
         ST    R13,4(R11)      STORE BACKWARD POINTER
         ST    R11,8(R13)      STORE FORWARD POINTER
*
         LR    R13,R11         GET SAVE AREA ADDRESS ..
* ---
         L     R6,USRPTIOT     GET POINTER TO TIOT
         USING TIOT1,R6
*
         DO WHILE=(CLI,TIOELNGH,NE,X'00')
* --- STDIN
           IF (CLC,TIOEDDNM,EQ,=CL8'STDIN')
             OI  FLAGS1,FL1IN    MARK STDIN  AS FOUND
* --- STDOUT
           ELSEIF (CLC,TIOEDDNM,EQ,=CL8'STDOUT')
             OI  FLAGS1,FL1OUT   MARK STDOUT AS FOUND
* --- STDERR
           ELSEIF (CLC,TIOEDDNM,EQ,=CL8'STDERR')
             OI  FLAGS1,FL1ERR   MARK STDERR AS FOUND
* --- RXLIB
           ELSEIF (CLC,TIOEDDNM,EQ,=CL8'RXLIB')
             OI  FLAGS1,FL1RXL   MARK RXLIB  AS FOUND
           ENDIF
*
           SR  R1,R1           CLEAR R1
           IC  R1,TIOELNGH     SAVE LENGTH VALUE IN R1
           LA  R6,0(R1,R6)     PREPARE NEXT ITERATION
*
         ENDDO
*
         DROP  R6              TIOT IS NOT LONGER NEEDED
* --- EXIT CODING
         L     R13,4(,R13)     PICK UP CALLER'S SAVE AREA
         L     R14,12(,R13)    GET RETURN ADDRESS
         RETURN (0,12)
* ---
         LTORG
*
         EJECT
* =====================================================================
* ALLOCATE
*
*     PERFORM ALLOCATION FOR GIVE DD NAME
*
*     INPUT:
*              R1    PARAMS
*              R5    USERAREA
*
*     OUTPUT:
*
*     REGISTER USAGE:
*              R5    USERREA
*              R12   BASE REGISTER
*
* =====================================================================
         USING USER,R5
ALLOCATE CSECT ,
*
* --- ENTRY CODING
         SAVE  (14,12),,ALLOCATE SAVE CALLER'S REGISTERS
         BALR  R12,R0          ESTABLISH ADDRESSABILITY
         USING *,R12           SET BASE REGISTER
*
         LA    R11,USRSA       GET SAVE AREA POINTER
         ST    R13,4(R11)      STORE BACKWARD POINTER
         ST    R11,8(R13)      STORE FORWARD POINTER
*
         LR    R13,R11         GET SAVE AREA ADDRESS ..
* ---
         L     R10,0(,R1)
         LA    R10,0(,R10)
         XC    UARBP(UALEN),UARBP CLEAR
*
         LA    R9,UARBP
         USING S99RBP,R9
         LA    R4,S99RBPTR+L'S99RBPTR
         USING S99RB,R4
         ST    R4,S99RBPTR
         OI    S99RBPTR,S99RBPND
         DROP  R9
* --- BUILD REQUEST BLOCK
         MVI   S99RBLN,S99RBLEN
         MVI   S99VERB,S99VRBAL
         LA    R2,UATUPL
         ST    R2,S99TXTPP
         DROP  R4
*
         USING S99TUPL,R2
* --- TEXT UNIT POINTER DALDDNAM
         LA    R6,UADDNAMU
         ST    R6,S99TUPTR
* --- TEXT UNIT POINTER DALTERM
         LA    R2,S99TUPL+L'S99TUPTR POINT TO NEXT ELEMENT
         LA    R6,UATERMU
         ST    R6,S99TUPTR
* --- TEXT UNIT POINTER DALPERMA
         LA    R2,S99TUPL+L'S99TUPTR POINT TO NEXT ELEMENT
         LA    R6,UAPERMU
         ST    R6,S99TUPTR
* --- TEXT UNIT POINTER DALSTATS
         LA    R2,S99TUPL+L'S99TUPTR POINT TO NEXT ELEMENT
         LA    R6,UASTATSU
         ST    R6,S99TUPTR
* --- MARK LAST ENTRY IN TEXT UNIT POINTER LIST
         OI    S99TUPTR,S99TUPLN
* --- BUILD TEXT UNITS
         MVC   UADDNAMU(UADDNAML),MADDNAMU
         MVC   UATERMU(UATERML),MATERMU
         MVC   UAPERMU(UAPERML),MAPERMU
         MVC   UASTATSU(UASTATSL),MASTATSU
* --- FILL TEXT UNITS WITH VALUES
         MVC   UADDNAM(L'UADDNAM),0(R10) DDNAME
         MVI   UASTATS,X'08'             STATUS SHARE
*
         LA    R1,UARBP
         DYNALLOC
* --- EXIT CODING
         L     R13,4(,R13)     PICK UP CALLER'S SAVE AREA
         L     R14,12(,R13)    GET RETURN ADDRESS
         RETURN (0,12)
* ---
         LTORG
*
MADDNAMU DC    AL2(DALDDNAM),X'0001',X'0008'    DDNAME
MATERMU  DC    AL2(DALTERM),X'0000'             TERMINAL
MAPERMU  DC    AL2(DALPERMA),X'0000'            PERMANENT
MASTATSU DC    AL2(DALSTATS),X'0001',X'0001'    STATUS
         EJECT
* =====================================================================
* PARAMETER AREA
* =====================================================================
PARAMS   DSECT
RXCTXPTR DS    A
WORKPTR  DS    A
* =====================================================================
* USER AREA DUMMY SECTION
* =====================================================================
USER     DSECT
USREYE   DS    0CL4            THE EYE CATCHER
         DC    CL4'USER'
USRSA    DS    18F             SAVE AREA
* --- ADDRESS FIELDS
USRPTIOT DS    F               PTR TO TIOT
USRPCVT  DS    F               PTR TO CVT
* --- BLDL MACRO
         DS    0F              ALIGNMENT FOR BLDL
USRBLDL  DS    0CL80           BLDL PARAMETER LIST
USRBLDLF DS    H               # BLDL ENTRIES TO SEARCH
USRBLDLL DS    H               LENGTH OF BLDL PARAMTER LIST
USRBLDLN DS    CL8             PROGRAM NAME TO SEARCH
USRBLDLD DS    CL68            BLDL RETURN DATA AREA
* --- EXTRACT MACRO
EXTADDR  DS    3F
USREXTR  EXTRACT MF=L          EXTRACT PARAMETER LIST
* --- CALL MACROS
USRCALL  CALL ,(0,0,0),MF=L    CALL PARAMETER LIST W 3 PARMS
* --- FFLAG FIELDS
FLAGS    DS    0F
FLAGS1   DC    X'00'
FL18     EQU   X'80' 1... ....  UNSED
FL17     EQU   X'40' .1.. ....  UNSED
FL16     EQU   X'20' ..1. ....  UNSED
FL15     EQU   X'10' ...1 ....  UNSED
FL1RXL   EQU   X'08' .... 1...  RXLIB  ALLOCATION FOUND
FL1ERR   EQU   X'04' .... .1..  STDERR ALLOCATION FOUND
FL1OUT   EQU   X'02' .... ..1.  STDOUT ALLOCATION FOUND
FL1IN    EQU   X'01' .... ...1  STDIN  ALLOCATION FOUND
FLAGS2   DC    X'00'
FL28     EQU   X'80' 1... ....  UNSED
FL27     EQU   X'40' .1.. ....  UNSED
FL26     EQU   X'20' ..1. ....  UNSED
FL25     EQU   X'10' ...1 ....  UNSED
FL2ISPF  EQU   X'08' .... 1...  ISPF ENVIRONMENT FOUND
FL2EXEC  EQU   X'04' .... .1..  EXEC ENVIRONMENT FOUND
FL2TSOBG EQU   X'02' .... ..1.  TSO BACKGROUND ENVIRONMENT FOUND
FL2TSOFG EQU   X'01' .... ...1  TSO FOREGROUND ENVIRONMENT FOUND
FLAGS3   DC    X'00'
FL38     EQU   X'80' 1... ....  UNSED
FL37     EQU   X'40' .1.. ....  UNSED
FL36     EQU   X'20' ..1. ....  UNSED
FL35     EQU   X'10' ...1 ....  UNSED
FL34     EQU   X'08' .... 1...  UNSED
FL33     EQU   X'04' .... .1..  UNSED
FL32     EQU   X'02' .... ..1.  UNSED
FL31     EQU   X'01' .... ...1  UNSED
FLAGS4   DC    X'00'
* --- DYNALLOC REQUEST BLOCK
UARBP    DS    F,CL20          REQUEST BLOCK POINTER AND REQUEST BLOCK
UATUPL   DS    4A              TEXT UNIT POINTER LIST
* --- TEXT UNITS
UADDNAMU DC    H'1,1,8'        KEY,VALCOUNT,LEN
UADDNAML EQU   *-UADDNAMU
UADDNAM  DS    CL8
UATERMU  DC    H'40,0'         KEY,VALCOUNT,LEN
UATERML  EQU   *-UATERMU
UAPERMU  DC    H'52,0'         KEY,VALCOUNT,LEN
UAPERML  EQU   *-UAPERMU
UASTATSU DC    H'4,1,1'        KEY,VALCOUNT,LEN
UASTATSL EQU   *-UASTATSU
UASTATS  DS    X'08'           SHR
UALEN    EQU *-UARBP
USRLEN   EQU *-USER
         EJECT
* ---------------------------------------------------------------------
* OTHER DUMMY SECTIONS
* ---------------------------------------------------------------------
         CVT     DSECT=Y          COMMON VECTOR TABLE
         IHAPSA  DSECT=YES        PREFIXED SAVE AREA
         IHAASCB DSECT=YES        ADDRESS SPACE CONTOL BLOCK
         IHAASXB DSECT=YES        ADDRESS SPACE EXTENSION BLOCK
         IKJEFLWA ,               LOGON WORK AREA
         IKJECT   ,               ENVIRONMENT CONTROL TABLE
         IKJPSCB  ,               PROTECTED STEP CONTROL BLOCK
         IEFTIOT1 ,               TASK INPUT OUTPUT TABLE
         IEFZB4D0 ,               DYNALLOC PARAMETER LIST
         IEFZB4D2 ,               DYNALLOC TEXT UNIT KEYS
* --- MISSING LENGTH EQUATE
S99RBLEN EQU   (S99RBEND-S99RB)
* --- I/O SERVICE ROUTINE WORK AREA
IOSRL    DSECT                    ECTIOWA -> IOSRL
IOSTELM  DS    A                  TOP STACK ELEMENT POINTER
IOSBELM  DS    A                  BOTTOM ELEMENT POINTER
IOSTLEN  DS    H                  STACK SIZE
IOSNELM  DS    H                  NUMBER OF ELEMENTS
IOSUNUSD DS    F                  SPARE
* --- INPUT STACK ELEMENT
INSTACK  DSECT                    IOSTELM -> TOP ELEMENT
INSCODE  DS    X                  INPUT STACK OPTIONS
INSTERM  EQU   X'80'              TERMINAL INPUT STACK ENTRY
*        EQU   X'40'              .
INSINDD  EQU   X'20'              INPUT FROM DD VIA DCB
INSOTDD  EQU   X'10'              OUTPUT TO DD VIA DCB
INSEXEC  EQU   X'08'              EXEC COMMAND STACK ENTRY
INSPROM  EQU   X'04'              PROMPT ALLOWED
INSPROC  EQU   X'02'              PROCEDURE FLAG
INSLIST  EQU   X'01'              LIST LINES BEFORE EXEC
INSADLSD DS    AL3                POINTER TO LSD
         EJECT
         COPY  MRXREGS
         END   RXINIT
